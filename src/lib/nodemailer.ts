import nodemailer from "nodemailer";
import config from "../config";

const createTransporter = () => {
  // –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–ª—è Vercel
  console.log("üîß Nodemailer config:", {
    service: "gmail",
    user: config.env.mail.prod.user ? "‚úÖ –í–∫–∞–∑–∞–Ω–æ" : "‚ùå –ù–µ –≤–∫–∞–∑–∞–Ω–æ",
    pass: config.env.mail.prod.pass ? "‚úÖ –í–∫–∞–∑–∞–Ω–æ" : "‚ùå –ù–µ –≤–∫–∞–∑–∞–Ω–æ",
    from: config.env.mail.prod.from,
    admin: config.env.mail.prod.admin,
    environment: process.env.NODE_ENV,
    vercel: process.env.VERCEL ? "‚úÖ Vercel" : "‚ùå –õ–æ–∫–∞–ª—å–Ω–∏–π",
  });

  return nodemailer.createTransport({
    service: "gmail",
    auth: {
      user: config.env.mail.prod.user,
      pass: config.env.mail.prod.pass, // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ App Password –∑–∞–º—ñ—Å—Ç—å –∑–≤–∏—á–∞–π–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è
    },
    secure: true, // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ SSL/TLS
  });
};

export const sendMail = async (to: string, subject: string, html: string) => {
  try {
    const transporter = createTransporter();

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –ø–µ—Ä–µ–¥ –≤—ñ–¥–ø—Ä–∞–≤–∫–æ—é
    console.log("üîç –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ Gmail...");
    await transporter.verify();
    console.log("‚úÖ –ó'—î–¥–Ω–∞–Ω–Ω—è –∑ Gmail —É—Å–ø—ñ—à–Ω–µ");

    const result = await transporter.sendMail({
      from: config.env.mail.prod.from,
      to,
      subject,
      html,
    });

    console.log("‚úÖ Email sent successfully:", {
      messageId: result.messageId,
      to: to,
      from: config.env.mail.prod.from,
      environment: process.env.NODE_ENV,
    });
    return result;
  } catch (error) {
    console.error("‚ùå Error sending email:", {
      error: error instanceof Error ? error.message : "Unknown error",
      code: error instanceof Error ? (error as { code?: string }).code : "No code",
      environment: process.env.NODE_ENV,
      vercel: process.env.VERCEL ? "Vercel" : "Local",
    });

    // –î–µ—Ç–∞–ª—å–Ω–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–ª—è Vercel
    if (error instanceof Error) {
      const errorWithCode = error as { code?: string };
      if (errorWithCode.code === "EAUTH") {
        throw new Error(
          `Gmail –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è –Ω–µ –≤–¥–∞–ª–∞—Å—è. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ EMAIL_USER —Ç–∞ EMAIL_PASS –≤ Vercel Environment Variables`,
        );
      }
      if (errorWithCode.code === "ECONNECTION") {
        throw new Error(`–ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ Gmail. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –º–µ—Ä–µ–∂–µ–≤—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è`);
      }
    }

    throw new Error(`Failed to send email: ${error instanceof Error ? error.message : "Unknown error"}`);
  }
};

export default sendMail;
